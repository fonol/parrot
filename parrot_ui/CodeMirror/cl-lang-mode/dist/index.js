import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "!WQYQPOOOwQPO'#CiOOQO'#Cn'#CnOOQO'#Cj'#CjQYQPOOOOQO,59T,59TO!OQPO,59TOOQO-E6h-E6hOOQO1G.o1G.o",
  stateData: "!V~OaOSPOS~ORQOSQOTQOUQOVQOWQOXQOYQO[PO~OZTO~PYOZWO~PYO",
  goto: "zcPPPPPPPPPPPPPdjPPPtXQOPSUQSOQUPTVSUXROPSU",
  nodeNames: "âš  LineComment Program Identifier String Keyword Boolean Number KeywordSymbol Quoted SpecialForm ) ( Application",
  maxTerm: 18,
  nodeProps: [
    ["openedBy", 11,"("],
    ["closedBy", 12,")"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "#-}~RxXY#oYZ#o]^#opq#ors$Qwx$oxy%gyz%l{|%q}!O&b!Q!['b![!](O!]!^)Q!c!p&y!p!q)]!q!v&y!v!w*i!w!}&y#R#S&y#T#U&y#U#V+S#V#W.V#W#X0l#X#Y@f#Y#ZE_#Z#[Jg#[#]&y#]#^KU#^#`&y#`#aKs#a#b!,w#b#c!=Q#c#d&y#d#e!>^#e#f!@|#f#g!Bw#g#h!IP#h#i# [#i#j#&i#j#o&y~#tSa~XY#oYZ#o]^#opq#o~$TTOr$Qrs$ds#O$Q#O#P$i#P~$Q~$iOS~~$lPO~$Q~$rT}!O%R!Q![%R!c!}%R#R#S%R#T#o%R~%WTX~}!O%R!Q![%R!c!}%R#R#S%R#T#o%R~%lO[~~%qOZ~~%tP!Q![%w~%|QV~!P!Q&S!Q![%w~&VP!Q![&Y~&_PV~!Q![&Y~&gUR~}!O&y!Q!['b![!]&y!c!}&y#R#S&y#T#o&y~'OUR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~'iVV~R~}!O&y!P!Q&S!Q!['b![!]&y!c!}&y#R#S&y#T#o&y~(TUR~}!O(g!Q![(g![!]&y!c!}(g#R#S(g#T#o(g~(nUW~R~}!O(g!Q![(g![!]&y!c!}(g#R#S(g#T#o(g~)VQP~OY)QZ~)Q~)bWR~}!O&y!Q![&y![!]&y!c!k&y!k!l)z!l!}&y#R#S&y#T#o&y~*PWR~}!O&y!Q![&y![!]&y!c!n&y!n!o*i!o!}&y#R#S&y#T#o&y~*pUU~R~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~+XWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a+q#a#o&y~+vWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d,`#d#o&y~,eWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#V&y#V#W,}#W#o&y~-SWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#_&y#_#`-l#`#o&y~-sUY~R~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~.[VR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U.q#U#o&y~.vWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i/`#i#o&y~/eWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#V&y#V#W/}#W#o&y~0SWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#[&y#[#]-l#]#o&y~0qWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y1Z#Y#o&y~1`WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#Y&y#Y#Z1x#Z#o&y~1}`R~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#V&y#V#W3P#W#a&y#a#b6P#b#d&y#d#e8f#e#h&y#h#i=b#i#j?]#j#k?z#k#o&y~3UWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a3n#a#o&y~3sVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U4Y#U#o&y~4_WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#g&y#g#h4w#h#o&y~4|WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#g&y#g#h5f#h#o&y~5mUT~R~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~6UVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U6k#U#o&y~6pWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#V&y#V#W7Y#W#o&y~7_WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g7w#g#o&y~7|WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d5f#d#o&y~8kVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U9Q#U#o&y~9VWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g9o#g#o&y~9tVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U:Z#U#o&y~:`WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#a&y#a#b:x#b#o&y~:}WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y;g#Y#o&y~;lWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i<U#i#o&y~<ZWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y<s#Y#o&y~<xWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g5f#g#o&y~=gWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#m&y#m#n>P#n#o&y~>UWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#d&y#d#e>n#e#o&y~>sWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y5f#Y#o&y~?bWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#b&y#b#c5f#c#o&y~@PVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U<s#U#o&y~@kWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#j&y#j#kAT#k#o&y~AYVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#UAo#U#o&y~AtWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#aB^#a#o&y~BcUR~}!OBu!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~BzWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#k&y#k#lCd#l#o&y~CiWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#[&y#[#]DR#]#o&y~DWWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#YDp#Y#o&y~DuWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#b&y#b#c-l#c#o&y~EdYR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#aFS#a#i&y#i#jG`#j#o&y~FXWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#YFq#Y#o&y~FvWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i-l#i#o&y~GeWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#b&y#b#cG}#c#o&y~HSWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#V&y#V#WHl#W#o&y~HqWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#iIZ#i#o&y~I`WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#]&y#]#^Ix#^#o&y~I}WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#dDp#d#o&y~JlWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d-l#d#o&y~KZWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#Y&y#Y#Z-l#Z#o&y~KxZR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#ULk#U#X&y#X#Y! T#Y#c&y#c#d!!e#d#o&y~LpWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U&y#U#VMY#V#o&y~M_WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#YMw#Y#o&y~M|WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#aNf#a#o&y~NkWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#g&y#g#h-l#h#o&y~! YWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i! r#i#o&y~! yVY~R~z{!!`}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~!!eOY~~!!jXR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U!#V#U#V&y#V#W!*b#W#o&y~!#[WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#W&y#W#X!#t#X#o&y~!#yUR~}!O!$]!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~!$bWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i!$z#i#o&y~!%PWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#]&y#]#^!%i#^#o&y~!%nWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#a&y#a#b!&W#b#o&y~!&]WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y!&u#Y#o&y~!&zUR~}!O!'^!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~!'cWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#j&y#j#k!'{#k#o&y~!(QVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U!(g#U#o&y~!(lWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a!)U#a#o&y~!)ZWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#i&y#i#j!)s#j#o&y~!)xWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y-l#Y#o&y~!*gVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U!*|#U#o&y~!+RWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a!+k#a#o&y~!+pWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a!,Y#a#o&y~!,_WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#m&y#m#n-l#n#o&y~!,|XR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U!-i#U#i&y#i#j!0R#j#o&y~!-nWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#V&y#V#W!.W#W#o&y~!.]WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g!.u#g#o&y~!.zWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d!/d#d#o&y~!/iWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#aFS#a#o&y~!0WWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a!0p#a#o&y~!0uWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i!1_#i#o&y~!1dWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#]&y#]#^!1|#^#o&y~!2RWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#d&y#d#e!2k#e#o&y~!2pWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a!3Y#a#o&y~!3_WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y!3w#Y#o&y~!3|UR~}!O!4`!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~!4eWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#j&y#j#k!4}#k#o&y~!5SVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U!5i#U#o&y~!5nWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a!6W#a#o&y~!6]WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#i&y#i#j!6u#j#o&y~!6zWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y!7d#Y#o&y~!7iUR~}!O!7{!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~!8QYR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#V&y#V#W!8p#W#d&y#d#e!:h#e#o&y~!8uVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U!9[#U#o&y~!9aWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a!9y#a#o&y~!:OWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a-l#a#o&y~!:mWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g!;V#g#o&y~!;[WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d!;t#d#o&y~!;yWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#Z&y#Z#[!<c#[#o&y~!<hWR~}!O&y!Q!R&y!R!S-l!S![&y![!]&y!c!}&y#R#S&y#T#o&y~!=VWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#]&y#]#^!=o#^#o&y~!=tWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a*i#a#o&y~!>cWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g!>{#g#o&y~!?QWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d!?j#d#o&y~!?oWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#Z&y#Z#[!@X#[#o&y~!@^YR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#b&y#b#c-l#c#j&y#j#k-l#k#o&y~!ARWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#i&y#i#j!Ak#j#o&y~!ApWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d!BY#d#o&y~!B_WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i!)s#i#o&y~!B|WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y!Cf#Y#o&y~!CkWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i!DT#i#o&y~!DYWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#i&y#i#j!Dr#j#o&y~!DwWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g!Ea#g#o&y~!EfWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#b&y#b#c!FO#c#o&y~!FTUR~}!O!Fg!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~!FlWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#Y&y#Y#Z!GU#Z#o&y~!GZWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g!Gs#g#o&y~!GxWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d!Hb#d#o&y~!HgWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#a&y#a#b-l#b#o&y~!IUYR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y!It#Y#m&y#m#n!KQ#n#o&y~!IyWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i!Jc#i#o&y~!JhWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#e&y#e#f-l#f#o&y~!KVWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#a&y#a#b!Ko#b#o&y~!KtWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U&y#U#V!L^#V#o&y~!LcWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d!L{#d#o&y~!MQWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#`&y#`#a!Mj#a#o&y~!MoUR~}!O!NR!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~!NWWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#a&y#a#b!Np#b#o&y~!NuVR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U!-i#U#o&y~# cXU~R~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U#!O#U#[&y#[#]#$h#]#o&y~#!TWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#Z&y#Z#[#!m#[#o&y~#!rWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#U&y#U#V##[#V#o&y~##aWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d##y#d#o&y~#$OWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#W&y#W#X!,Y#X#o&y~#$mYR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y-l#Y#f&y#f#g#%]#g#o&y~#%bWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d#%z#d#o&y~#&PWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#k&y#k#l-l#l#o&y~#&nWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#b&y#b#c#'W#c#o&y~#']WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#k&y#k#l#'u#l#o&y~#'zWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#]&y#]#^#(d#^#o&y~#(iWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#b&y#b#c#)R#c#o&y~#)WWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#W&y#W#X#)p#X#o&y~#)uUR~}!O#*X!Q![&y![!]&y!c!}&y#R#S&y#T#o&y~#*^WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#d&y#d#e#*v#e#o&y~#*{WR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#f&y#f#g#+e#g#o&y~#+jWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#c&y#c#d#,S#d#o&y~#,XWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#h&y#h#i#,q#i#o&y~#,vWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#X&y#X#Y#-`#Y#o&y~#-eWR~}!O&y!Q![&y![!]&y!c!}&y#R#S&y#T#V&y#V#WFq#W#o&y",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 0
});

const CommonLisp = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ")", align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            styleTags({
                Identifier: tags.variableName,
                Boolean: tags.bool,
                String: tags.string,
                LineComment: tags.lineComment,
                "( )": tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: { line: ";" }
    }
});
function commonLisp() {
    return new LanguageSupport(CommonLisp);
}

export { CommonLisp, commonLisp };
