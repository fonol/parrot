'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!WQYQPOOOwQPO'#CiOOQO'#Cn'#CnOOQO'#Cj'#CjQYQPOOOOQO,59T,59TO!OQPO,59TOOQO-E6h-E6hOOQO1G.o1G.o",
  stateData: "!V~OaOSPOS~ORQOSQOTQOUQOVQOWQOXQOYQO[PO~OZTO~PYOZWO~PYO",
  goto: "zcPPPPPPPPPPPPPdjPPPtXQOPSUQSOQUPTVSUXROPSU",
  nodeNames: "âš  LineComment Program Identifier String Keyword Boolean Number KeywordSymbol Quoted SpecialForm ) ( Application",
  maxTerm: 18,
  nodeProps: [
    ["openedBy", 11,"("],
    ["closedBy", 12,")"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "#.W~RyXY#rYZ#r]^#rpq#rrs$Tst$rwx$xxy%pyz%u{|%z}!O&k!Q!['k![!](X!]!^)Z!c!p'S!p!q)f!q!v'S!v!w*r!w!}'S#R#S'S#T#U'S#U#V+]#V#W.`#W#X0u#X#Y@o#Y#ZEh#Z#[Jp#[#]'S#]#^K_#^#`'S#`#aK|#a#b!-Q#b#c!=Z#c#d'S#d#e!>g#e#f!AV#f#g!CQ#g#h!IY#h#i# e#i#j#&r#j#o'S~#wSa~XY#rYZ#r]^#rpq#r~$WTOr$Trs$gs#O$T#O#P$l#P~$T~$lOS~~$oPO~$T~$uPwx$x~${T}!O%[!Q![%[!c!}%[#R#S%[#T#o%[~%aTX~}!O%[!Q![%[!c!}%[#R#S%[#T#o%[~%uO[~~%zOZ~~%}P!Q![&Q~&VQV~!P!Q&]!Q![&Q~&`P!Q![&c~&hPV~!Q![&c~&pUR~}!O'S!Q!['k![!]'S!c!}'S#R#S'S#T#o'S~'XUR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~'rVV~R~}!O'S!P!Q&]!Q!['k![!]'S!c!}'S#R#S'S#T#o'S~(^UR~}!O(p!Q![(p![!]'S!c!}(p#R#S(p#T#o(p~(wUW~R~}!O(p!Q![(p![!]'S!c!}(p#R#S(p#T#o(p~)`QP~OY)ZZ~)Z~)kWR~}!O'S!Q!['S![!]'S!c!k'S!k!l*T!l!}'S#R#S'S#T#o'S~*YWR~}!O'S!Q!['S![!]'S!c!n'S!n!o*r!o!}'S#R#S'S#T#o'S~*yUU~R~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~+bWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a+z#a#o'S~,PWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d,i#d#o'S~,nWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W-W#W#o'S~-]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#_'S#_#`-u#`#o'S~-|UY~R~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~.eVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U.z#U#o'S~/PWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i/i#i#o'S~/nWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W0W#W#o'S~0]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#['S#[#]-u#]#o'S~0zWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y1d#Y#o'S~1iWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Y'S#Y#Z2R#Z#o'S~2W`R~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W3Y#W#a'S#a#b6Y#b#d'S#d#e8o#e#h'S#h#i=k#i#j?f#j#k@T#k#o'S~3_WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a3w#a#o'S~3|VR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U4c#U#o'S~4hWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#g'S#g#h5Q#h#o'S~5VWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#g'S#g#h5o#h#o'S~5vUT~R~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~6_VR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U6t#U#o'S~6yWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W7c#W#o'S~7hWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g8Q#g#o'S~8VWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d5o#d#o'S~8tVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U9Z#U#o'S~9`WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g9x#g#o'S~9}VR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U:d#U#o'S~:iWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#b;R#b#o'S~;WWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y;p#Y#o'S~;uWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i<_#i#o'S~<dWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y<|#Y#o'S~=RWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g5o#g#o'S~=pWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#m'S#m#n>Y#n#o'S~>_WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#d'S#d#e>w#e#o'S~>|WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y5o#Y#o'S~?kWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c5o#c#o'S~@YVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U<|#U#o'S~@tWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#j'S#j#kA^#k#o'S~AcVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#UAx#U#o'S~A}WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#aBg#a#o'S~BlUR~}!OCO!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~CTWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#k'S#k#lCm#l#o'S~CrWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#['S#[#]D[#]#o'S~DaWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#YDy#Y#o'S~EOWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c-u#c#o'S~EmYR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#aF]#a#i'S#i#jGi#j#o'S~FbWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#YFz#Y#o'S~GPWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i-u#i#o'S~GnWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#cHW#c#o'S~H]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#WHu#W#o'S~HzWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#iId#i#o'S~IiWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^JR#^#o'S~JWWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#dDy#d#o'S~JuWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d-u#d#o'S~KdWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Y'S#Y#Z-u#Z#o'S~LRZR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#ULt#U#X'S#X#Y! ^#Y#c'S#c#d!!n#d#o'S~LyWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U'S#U#VMc#V#o'S~MhWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#YNQ#Y#o'S~NVWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#aNo#a#o'S~NtWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#g'S#g#h-u#h#o'S~! cWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i! {#i#o'S~!!SVY~R~z{!!i}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!!nOY~~!!sXR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!#`#U#V'S#V#W!*k#W#o'S~!#eWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#W'S#W#X!#}#X#o'S~!$SUR~}!O!$f!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!$kWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!%T#i#o'S~!%YWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^!%r#^#o'S~!%wWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#b!&a#b#o'S~!&fWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!'O#Y#o'S~!'TUR~}!O!'g!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!'lWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#j'S#j#k!(U#k#o'S~!(ZVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!(p#U#o'S~!(uWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!)_#a#o'S~!)dWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#i'S#i#j!)|#j#o'S~!*RWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y-u#Y#o'S~!*pVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!+V#U#o'S~!+[WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!+t#a#o'S~!+yWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!,c#a#o'S~!,hWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#m'S#m#n-u#n#o'S~!-VXR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!-r#U#i'S#i#j!0[#j#o'S~!-wWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W!.a#W#o'S~!.fWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!/O#g#o'S~!/TWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!/m#d#o'S~!/rWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#aF]#a#o'S~!0aWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!0y#a#o'S~!1OWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!1h#i#o'S~!1mWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^!2V#^#o'S~!2[WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#d'S#d#e!2t#e#o'S~!2yWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!3c#a#o'S~!3hWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!4Q#Y#o'S~!4VUR~}!O!4i!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!4nWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#j'S#j#k!5W#k#o'S~!5]VR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!5r#U#o'S~!5wWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!6a#a#o'S~!6fWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#i'S#i#j!7O#j#o'S~!7TWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!7m#Y#o'S~!7rUR~}!O!8U!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!8ZYR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W!8y#W#d'S#d#e!:q#e#o'S~!9OVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!9e#U#o'S~!9jWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!:S#a#o'S~!:XWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a-u#a#o'S~!:vWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!;`#g#o'S~!;eWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!;}#d#o'S~!<SWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Z'S#Z#[!<l#[#o'S~!<qWR~}!O'S!Q!R'S!R!S-u!S!['S![!]'S!c!}'S#R#S'S#T#o'S~!=`WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^!=x#^#o'S~!=}WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a*r#a#o'S~!>lWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!?U#g#o'S~!?ZWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!?s#d#o'S~!?xWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Z'S#Z#[!@b#[#o'S~!@gYR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c-u#c#j'S#j#k-u#k#o'S~!A[WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#i'S#i#j!At#j#o'S~!AyWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!Bc#d#o'S~!BhWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!)|#i#o'S~!CVWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!Co#Y#o'S~!CtWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!D^#i#o'S~!DcWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#i'S#i#j!D{#j#o'S~!EQWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!Ej#g#o'S~!EoWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c!FX#c#o'S~!F^UR~}!O!Fp!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!FuWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Y'S#Y#Z!G_#Z#o'S~!GdWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!G|#g#o'S~!HRWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!Hk#d#o'S~!HpWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#b-u#b#o'S~!I_YR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!I}#Y#m'S#m#n!KZ#n#o'S~!JSWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!Jl#i#o'S~!JqWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#e'S#e#f-u#f#o'S~!K`WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#b!Kx#b#o'S~!K}WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U'S#U#V!Lg#V#o'S~!LlWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!MU#d#o'S~!MZWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!Ms#a#o'S~!MxUR~}!O!N[!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!NaWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#b!Ny#b#o'S~# OVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!-r#U#o'S~# lXU~R~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U#!X#U#['S#[#]#$q#]#o'S~#!^WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Z'S#Z#[#!v#[#o'S~#!{WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U'S#U#V##e#V#o'S~##jWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d#$S#d#o'S~#$XWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#W'S#W#X!,c#X#o'S~#$vYR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y-u#Y#f'S#f#g#%f#g#o'S~#%kWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d#&T#d#o'S~#&YWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#k'S#k#l-u#l#o'S~#&wWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c#'a#c#o'S~#'fWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#k'S#k#l#(O#l#o'S~#(TWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^#(m#^#o'S~#(rWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c#)[#c#o'S~#)aWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#W'S#W#X#)y#X#o'S~#*OUR~}!O#*b!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~#*gWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#d'S#d#e#+P#e#o'S~#+UWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g#+n#g#o'S~#+sWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d#,]#d#o'S~#,bWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i#,z#i#o'S~#-PWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y#-i#Y#o'S~#-nWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#WFz#W#o'S",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 0
});

const CommonLisp = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({
                Application: language.delimitedIndent({ closing: ")", align: false })
            }),
            language.foldNodeProp.add({
                Application: language.foldInside
            }),
            highlight.styleTags({
                Identifier: highlight.tags.variableName,
                Boolean: highlight.tags.bool,
                String: highlight.tags.string,
                LineComment: highlight.tags.lineComment,
                "( )": highlight.tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: { line: ";" }
    }
});
function commonLisp() {
    return new language.LanguageSupport(CommonLisp);
}

exports.CommonLisp = CommonLisp;
exports.commonLisp = commonLisp;
