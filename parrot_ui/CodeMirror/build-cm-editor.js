import { EditorView } from "codemirror"
import { EditorState} from "@codemirror/state"
import { vim, Vim } from "@replit/codemirror-vim"
import {
  keymap,
  highlightSpecialChars, drawSelection, rectangularSelection,
  dropCursor,
  lineNumbers
} from "@codemirror/view"

import {indentOnInput, bracketMatching, HighlightStyle, syntaxHighlighting} from "@codemirror/language"
import {defaultKeymap, history, indentWithTab} from "@codemirror/commands"
import {closeBrackets} from "@codemirror/autocomplete"

// import {foldGutter, foldKeymap} from "@codemirror/fold"
// import {searchKeymap, highlightSelectionMatches} from "@codemirror/search"
// import {autocompletion, completionKeymap} from "@codemirror/autocomplete"
// import {commentKeymap} from "@codemirror/comment"

import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "#SQYQPOOOwQPO'#CiOOQO'#Co'#CoO!OQPO'#CoOOQO'#Ck'#CkQYQPOOOOQO,59T,59TO!TQPO,59TO![QPO'#CjOOQO,59Z,59ZOOQO-E6i-E6iOOQO1G.o1G.oO!aQPO,59UOOQO1G.p1G.pO!hQPO1G.pOOQO7+$[7+$[",
  stateData: "!o~ObOSPOS~ORQOSQOTQOUQOVQOWQOXQOYQO[PO~OZUO~PYO[WO~OZZO~PYOT[O~OZ]O~PYOZ_O~PYO",
  goto: "!WdPPPPPPPPPPPPPempPPP!O]ROPTV[^RXRQTOQVPUYTV^R^[]SOPTV[^",
  nodeNames: "âš  LineComment Program Identifier String Keyword Boolean Number KeywordSymbol Quoted SpecialForm ) ( Application KeywordApplication",
  maxTerm: 19,
  nodeProps: [
    ["openedBy", 11,"("],
    ["closedBy", 12,")"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "!Nl~RyXY#rYZ#r]^#rpq#rrs$Tst$rwx$xxy%pyz%u{|%z}!O&k!Q!['k![!](X!]!^)Z!c!p'S!p!q)f!q!v'S!v!w*r!w!}'S#R#S'S#T#U'S#U#V+]#V#W.`#W#X0u#X#Y3T#Y#Z7|#Z#[=U#[#]'S#]#^=s#^#`'S#`#a>b#a#bMf#b#c!/o#c#d'S#d#e!0{#e#f!3k#f#g!5f#g#h!;n#h#i!Ay#i#j!GW#j#o'S~#wSb~XY#rYZ#r]^#rpq#r~$WTOr$Trs$gs#O$T#O#P$l#P~$T~$lOS~~$oPO~$T~$uPwx$x~${T}!O%[!Q![%[!c!}%[#R#S%[#T#o%[~%aTX~}!O%[!Q![%[!c!}%[#R#S%[#T#o%[~%uO[~~%zOZ~~%}P!Q![&Q~&VQV~!P!Q&]!Q![&Q~&`P!Q![&c~&hPV~!Q![&c~&pUR~}!O'S!Q!['k![!]'S!c!}'S#R#S'S#T#o'S~'XUR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~'rVV~R~}!O'S!P!Q&]!Q!['k![!]'S!c!}'S#R#S'S#T#o'S~(^UR~}!O(p!Q![(p![!]'S!c!}(p#R#S(p#T#o(p~(wUW~R~}!O(p!Q![(p![!]'S!c!}(p#R#S(p#T#o(p~)`QP~OY)ZZ~)Z~)kWR~}!O'S!Q!['S![!]'S!c!k'S!k!l*T!l!}'S#R#S'S#T#o'S~*YWR~}!O'S!Q!['S![!]'S!c!n'S!n!o*r!o!}'S#R#S'S#T#o'S~*yUU~R~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~+bWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a+z#a#o'S~,PWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d,i#d#o'S~,nWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W-W#W#o'S~-]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#_'S#_#`-u#`#o'S~-|UY~R~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~.eVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U.z#U#o'S~/PWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i/i#i#o'S~/nWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W0W#W#o'S~0]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#['S#[#]-u#]#o'S~0zWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y1d#Y#o'S~1iWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Y'S#Y#Z2R#Z#o'S~2WUR~}!O2j!Q![2j![!]2j!c!}2j#R#S2j#T#o2j~2qUT~R~}!O2j!Q![2j![!]2j!c!}2j#R#S2j#T#o2j~3YWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#j'S#j#k3r#k#o'S~3wVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U4^#U#o'S~4cWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a4{#a#o'S~5QUR~}!O5d!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~5iWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#k'S#k#l6R#l#o'S~6WWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#['S#[#]6p#]#o'S~6uWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y7_#Y#o'S~7dWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c-u#c#o'S~8RYR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a8q#a#i'S#i#j9}#j#o'S~8vWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y9`#Y#o'S~9eWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i-u#i#o'S~:SWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c:l#c#o'S~:qWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W;Z#W#o'S~;`WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i;x#i#o'S~;}WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^<g#^#o'S~<lWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d7_#d#o'S~=ZWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d-u#d#o'S~=xWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Y'S#Y#Z-u#Z#o'S~>gZR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U?Y#U#X'S#X#YAr#Y#c'S#c#dCS#d#o'S~?_WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U'S#U#V?w#V#o'S~?|WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y@f#Y#o'S~@kWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#aAT#a#o'S~AYWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#g'S#g#h-u#h#o'S~AwWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#iBa#i#o'S~BhVY~R~z{B}}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~CSOY~~CXXR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#UCt#U#V'S#V#WKP#W#o'S~CyWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#W'S#W#XDc#X#o'S~DhUR~}!ODz!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~EPWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#iEi#i#o'S~EnWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^FW#^#o'S~F]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#bFu#b#o'S~FzWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#YGd#Y#o'S~GiUR~}!OG{!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~HQWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#j'S#j#kHj#k#o'S~HoVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#UIU#U#o'S~IZWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#aIs#a#o'S~IxWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#i'S#i#jJb#j#o'S~JgWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y-u#Y#o'S~KUVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#UKk#U#o'S~KpWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#aLY#a#o'S~L_WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#aLw#a#o'S~L|WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#m'S#m#n-u#n#o'S~MkXR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#UNW#U#i'S#i#j!!p#j#o'S~N]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#WNu#W#o'S~NzWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g! d#g#o'S~! iWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!!R#d#o'S~!!WWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a8q#a#o'S~!!uWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!#_#a#o'S~!#dWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!#|#i#o'S~!$RWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^!$k#^#o'S~!$pWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#d'S#d#e!%Y#e#o'S~!%_WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!%w#a#o'S~!%|WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!&f#Y#o'S~!&kUR~}!O!&}!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!'SWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#j'S#j#k!'l#k#o'S~!'qVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!(W#U#o'S~!(]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!(u#a#o'S~!(zWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#i'S#i#j!)d#j#o'S~!)iWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!*R#Y#o'S~!*WUR~}!O!*j!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!*oYR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W!+_#W#d'S#d#e!-V#e#o'S~!+dVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!+y#U#o'S~!,OWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!,h#a#o'S~!,mWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a-u#a#o'S~!-[WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!-t#g#o'S~!-yWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!.c#d#o'S~!.hWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Z'S#Z#[!/Q#[#o'S~!/VWR~}!O'S!Q!R'S!R!S-u!S!['S![!]'S!c!}'S#R#S'S#T#o'S~!/tWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^!0^#^#o'S~!0cWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a*r#a#o'S~!1QWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!1j#g#o'S~!1oWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!2X#d#o'S~!2^WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Z'S#Z#[!2v#[#o'S~!2{YR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c-u#c#j'S#j#k-u#k#o'S~!3pWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#i'S#i#j!4Y#j#o'S~!4_WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!4w#d#o'S~!4|WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#iJb#i#o'S~!5kWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!6T#Y#o'S~!6YWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!6r#i#o'S~!6wWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#i'S#i#j!7a#j#o'S~!7fWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!8O#g#o'S~!8TWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c!8m#c#o'S~!8rUR~}!O!9U!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!9ZWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Y'S#Y#Z!9s#Z#o'S~!9xWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!:b#g#o'S~!:gWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!;P#d#o'S~!;UWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#b-u#b#o'S~!;sYR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!<c#Y#m'S#m#n!=o#n#o'S~!<hWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!=Q#i#o'S~!=VWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#e'S#e#f-u#f#o'S~!=tWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#b!>^#b#o'S~!>cWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U'S#U#V!>{#V#o'S~!?QWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!?j#d#o'S~!?oWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#`'S#`#a!@X#a#o'S~!@^UR~}!O!@p!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!@uWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#a'S#a#b!A_#b#o'S~!AdVR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#UNW#U#o'S~!BQXU~R~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U!Bm#U#['S#[#]!EV#]#o'S~!BrWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#Z'S#Z#[!C[#[#o'S~!CaWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#U'S#U#V!Cy#V#o'S~!DOWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!Dh#d#o'S~!DmWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#W'S#W#XLw#X#o'S~!E[YR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y-u#Y#f'S#f#g!Ez#g#o'S~!FPWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!Fi#d#o'S~!FnWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#k'S#k#l-u#l#o'S~!G]WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c!Gu#c#o'S~!GzWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#k'S#k#l!Hd#l#o'S~!HiWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#]'S#]#^!IR#^#o'S~!IWWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#b'S#b#c!Ip#c#o'S~!IuWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#W'S#W#X!J_#X#o'S~!JdUR~}!O!Jv!Q!['S![!]'S!c!}'S#R#S'S#T#o'S~!J{WR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#d'S#d#e!Ke#e#o'S~!KjWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#f'S#f#g!LS#g#o'S~!LXWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#c'S#c#d!Lq#d#o'S~!LvWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#h'S#h#i!M`#i#o'S~!MeWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#X'S#X#Y!M}#Y#o'S~!NSWR~}!O'S!Q!['S![!]'S!c!}'S#R#S'S#T#V'S#V#W9`#W#o'S",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 0
});


const CommonLisp = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
              Application: context => context.column(context.node.from) + context.unit
                // Application: delimitedIndent({ closing: ")", align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            styleTags({
                Keyword: tags.keyword,
                Identifier: tags.variableName,
                KeywordSymbol: tags.atom,
                Quoted: tags.literal,
                Boolean: tags.bool,
                String: tags.string,
                Number: tags.number,
                SpecialForm: tags.keyword,
                LineComment: tags.lineComment,
                "( )": tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: { line: ";" }
    }
});

const highlightStyle = HighlightStyle.define([
  {tag: tags.keyword, color: "#35c16d"},
  {tag: tags.comment, color: "#a54819"},
  {tag: tags.number, color: "#80caff"},
  {tag: tags.string, color: "#2494c9"},
  {tag: tags.atom, color: "#ffb01f"},
  {tag: tags.bool, color: "#ffb01f"},
  {tag: tags.literal, color: "#be68ff"},
])
function commonLisp() {
    return new LanguageSupport(CommonLisp);
}




window.initEditor = (el, config, keyMap, updateCb) => {
  let {
    showLineNumbers,
    vimMode,
    vimAltEsc,

  } = config;

  let km = [];
  if (keyMap && Object.keys(keyMap).length) {
    for (let [key, cb] of Object.entries(keyMap)) {
      km.push({
        key: key,
        run: cb
      });
    }
  }
  let keymaps = [
    ...defaultKeymap,
    ...km
    // ...closeBracketsKeymap,
    // ...historyKeymap,
    // ...commentKeymap,
    // ...completionKeymap,
    // ...lintKeymap,
    // ...searchKeymap,
    //...foldKeymap,
  ];

  let updateListenerExt = EditorView.updateListener.of((update) => {
    if (update.docChanged) {
      updateCb();
    }
  });
  
 
  let extensions = [
    commonLisp(),
    syntaxHighlighting(highlightStyle, {fallback: true}),
    highlightSpecialChars(),
    history(),
    drawSelection(),
    dropCursor(),
    EditorState.allowMultipleSelections.of(true),
    indentOnInput(),
    bracketMatching(),
    closeBrackets(),
    rectangularSelection(),
    // defaultHighlightStyle.fallback,
      // foldGutter(),
      // highlightActiveLine(),
      // highlightActiveLineGutter(),
      // highlightSelectionMatches(),
    updateListenerExt,
    keymap.of(keymaps),
    keymap.of([indentWithTab]),
  ];
  if (showLineNumbers) {
    extensions.push(lineNumbers());
  }
  if (vimMode) {
    extensions.push(vim());
  }

  let editor = new EditorView({
    state: EditorState.create({
      extensions: extensions
    }),
    parent: el
  });
  // use cm to access the old cm5 api
  if (vimMode && vimAltEsc && vimAltEsc.length) {
    Vim.map(vimAltEsc, '<Esc>', 'insert');
  }
  return editor;

}