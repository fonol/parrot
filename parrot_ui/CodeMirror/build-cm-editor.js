import { EditorView } from "codemirror"
import { EditorState} from "@codemirror/state"
import { vim, Vim } from "@replit/codemirror-vim"
import {
  keymap,
  highlightSpecialChars, drawSelection, rectangularSelection,
  dropCursor,
  lineNumbers
} from "@codemirror/view"

import {indentOnInput, bracketMatching, HighlightStyle, syntaxHighlighting} from "@codemirror/language"
import {defaultKeymap, history, indentWithTab} from "@codemirror/commands"
import {closeBrackets} from "@codemirror/autocomplete"

// import {foldGutter, foldKeymap} from "@codemirror/fold"
// import {searchKeymap, highlightSelectionMatches} from "@codemirror/search"
// import {autocompletion, completionKeymap} from "@codemirror/autocomplete"
// import {commentKeymap} from "@codemirror/comment"

import { LRParser } from '@lezer/lr';
import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = LRParser.deserialize({
  version: 14,
  states: "!WQYQPOOOwQPO'#CiOOQO'#Cn'#CnOOQO'#Cj'#CjQYQPOOOOQO,59T,59TO!OQPO,59TOOQO-E6h-E6hOOQO1G.o1G.o",
  stateData: "!V~OaOSPOS~ORQOSQOTQOUQOVQOWQOXQOYQO[PO~OZTO~PYOZWO~PYO",
  goto: "zcPPPPPPPPPPPPPdjPPPtXQOPSUQSOQUPTVSUXROPSU",
  nodeNames: "âš  LineComment Program Identifier String Keyword Boolean Number KeywordSymbol Quoted SpecialForm ) ( Application",
  maxTerm: 18,
  nodeProps: [
    ["openedBy", 11,"("],
    ["closedBy", 12,")"]
  ],
  skippedNodes: [0,1],
  repeatNodeCount: 1,
  tokenData: "##h~RxXY#oYZ#o]^#opq#ors$Qwx$oxy%gyz%l{|%q}!O&b!Q!['[![!]'u!]!^(m!c!p&v!p!q(x!q!v&v!v!w*O!w!}&v#R#S&v#T#U&v#U#V*f#V#W-Y#W#X/c#X#Y=n#Y#ZA}#Z#[Fm#[#]&v#]#^GX#^#`&v#`#aGs#a#b!']#b#c!5t#c#d&v#d#e!6z#e#f!9^#f#g!;O#g#h!@h#h#i!FT#i#j!Jx#j#o&v~#tSa~XY#oYZ#o]^#opq#o~$TTOr$Qrs$ds#O$Q#O#P$i#P~$Q~$iOS~~$lPO~$Q~$rT}!O%R!Q![%R!c!}%R#R#S%R#T#o%R~%WTX~}!O%R!Q![%R!c!}%R#R#S%R#T#o%R~%lO[~~%qOZ~~%tP!Q![%w~%|QV~!P!Q&S!Q![%w~&VP!Q![&Y~&_PV~!Q![&Y~&gTR~}!O&v!Q!['[!c!}&v#R#S&v#T#o&v~&{TR~}!O&v!Q![&v!c!}&v#R#S&v#T#o&v~'cUV~R~}!O&v!P!Q&S!Q!['[!c!}&v#R#S&v#T#o&v~'xT}!O(X!Q![(X!c!}(X#R#S(X#T#o(X~(^TW~}!O(X!Q![(X!c!}(X#R#S(X#T#o(X~(rQP~OY(mZ~(m~(}VR~}!O&v!Q![&v!c!k&v!k!l)d!l!}&v#R#S&v#T#o&v~)iVR~}!O&v!Q![&v!c!n&v!n!o*O!o!}&v#R#S&v#T#o&v~*VTU~R~}!O&v!Q![&v!c!}&v#R#S&v#T#o&v~*kVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a+Q#a#o&v~+VVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d+l#d#o&v~+qVR~}!O&v!Q![&v!c!}&v#R#S&v#T#V&v#V#W,W#W#o&v~,]VR~}!O&v!Q![&v!c!}&v#R#S&v#T#_&v#_#`,r#`#o&v~,yTY~R~}!O&v!Q![&v!c!}&v#R#S&v#T#o&v~-_UR~}!O&v!Q![&v!c!}&v#R#S&v#T#U-q#U#o&v~-vVR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#i.]#i#o&v~.bVR~}!O&v!Q![&v!c!}&v#R#S&v#T#V&v#V#W.w#W#o&v~.|VR~}!O&v!Q![&v!c!}&v#R#S&v#T#[&v#[#],r#]#o&v~/hVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y/}#Y#o&v~0SVR~}!O&v!Q![&v!c!}&v#R#S&v#T#Y&v#Y#Z0i#Z#o&v~0n_R~}!O&v!Q![&v!c!}&v#R#S&v#T#V&v#V#W1m#W#a&v#a#b4^#b#d&v#d#e6g#e#h&v#h#i:y#i#j<k#j#k=V#k#o&v~1rVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a2X#a#o&v~2^UR~}!O&v!Q![&v!c!}&v#R#S&v#T#U2p#U#o&v~2uVR~}!O&v!Q![&v!c!}&v#R#S&v#T#g&v#g#h3[#h#o&v~3aVR~}!O&v!Q![&v!c!}&v#R#S&v#T#g&v#g#h3v#h#o&v~3}TT~R~}!O&v!Q![&v!c!}&v#R#S&v#T#o&v~4cUR~}!O&v!Q![&v!c!}&v#R#S&v#T#U4u#U#o&v~4zVR~}!O&v!Q![&v!c!}&v#R#S&v#T#V&v#V#W5a#W#o&v~5fVR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g5{#g#o&v~6QVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d3v#d#o&v~6lUR~}!O&v!Q![&v!c!}&v#R#S&v#T#U7O#U#o&v~7TVR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g7j#g#o&v~7oUR~}!O&v!Q![&v!c!}&v#R#S&v#T#U8R#U#o&v~8WVR~}!O&v!Q![&v!c!}&v#R#S&v#T#a&v#a#b8m#b#o&v~8rVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y9X#Y#o&v~9^VR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#i9s#i#o&v~9xVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y:_#Y#o&v~:dVR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g3v#g#o&v~;OVR~}!O&v!Q![&v!c!}&v#R#S&v#T#m&v#m#n;e#n#o&v~;jVR~}!O&v!Q![&v!c!}&v#R#S&v#T#d&v#d#e<P#e#o&v~<UVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y3v#Y#o&v~<pVR~}!O&v!Q![&v!c!}&v#R#S&v#T#b&v#b#c3v#c#o&v~=[UR~}!O&v!Q![&v!c!}&v#R#S&v#T#U:_#U#o&v~=sVR~}!O&v!Q![&v!c!}&v#R#S&v#T#j&v#j#k>Y#k#o&v~>_UR~}!O&v!Q![&v!c!}&v#R#S&v#T#U>q#U#o&v~>vVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a?]#a#o&v~?bTR~}!O?q!Q![&v!c!}&v#R#S&v#T#o&v~?vVR~}!O&v!Q![&v!c!}&v#R#S&v#T#k&v#k#l@]#l#o&v~@bVR~}!O&v!Q![&v!c!}&v#R#S&v#T#[&v#[#]@w#]#o&v~@|VR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#YAc#Y#o&v~AhVR~}!O&v!Q![&v!c!}&v#R#S&v#T#b&v#b#c,r#c#o&v~BSXR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#aBo#a#i&v#i#jCu#j#o&v~BtVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#YCZ#Y#o&v~C`VR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#i,r#i#o&v~CzVR~}!O&v!Q![&v!c!}&v#R#S&v#T#b&v#b#cDa#c#o&v~DfVR~}!O&v!Q![&v!c!}&v#R#S&v#T#V&v#V#WD{#W#o&v~EQVR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#iEg#i#o&v~ElVR~}!O&v!Q![&v!c!}&v#R#S&v#T#]&v#]#^FR#^#o&v~FWVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#dAc#d#o&v~FrVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d,r#d#o&v~G^VR~}!O&v!Q![&v!c!}&v#R#S&v#T#Y&v#Y#Z,r#Z#o&v~GxYR~}!O&v!Q![&v!c!}&v#R#S&v#T#UHh#U#X&v#X#YJt#Y#c&v#c#dLO#d#o&v~HmVR~}!O&v!Q![&v!c!}&v#R#S&v#T#U&v#U#VIS#V#o&v~IXVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#YIn#Y#o&v~IsVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#aJY#a#o&v~J_VR~}!O&v!Q![&v!c!}&v#R#S&v#T#g&v#g#h,r#h#o&v~JyVR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#iK`#i#o&v~KgUY~R~z{Ky}!O&v!Q![&v!c!}&v#R#S&v#T#o&v~LOOY~~LTWR~}!O&v!Q![&v!c!}&v#R#S&v#T#ULm#U#V&v#V#W!%S#W#o&v~LrVR~}!O&v!Q![&v!c!}&v#R#S&v#T#W&v#W#XMX#X#o&v~M^TR~}!OMm!Q![&v!c!}&v#R#S&v#T#o&v~MrVR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#iNX#i#o&v~N^VR~}!O&v!Q![&v!c!}&v#R#S&v#T#]&v#]#^Ns#^#o&v~NxVR~}!O&v!Q![&v!c!}&v#R#S&v#T#a&v#a#b! _#b#o&v~! dVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y! y#Y#o&v~!!OTR~}!O!!_!Q![&v!c!}&v#R#S&v#T#o&v~!!dVR~}!O&v!Q![&v!c!}&v#R#S&v#T#j&v#j#k!!y#k#o&v~!#OUR~}!O&v!Q![&v!c!}&v#R#S&v#T#U!#b#U#o&v~!#gVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a!#|#a#o&v~!$RVR~}!O&v!Q![&v!c!}&v#R#S&v#T#i&v#i#j!$h#j#o&v~!$mVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y,r#Y#o&v~!%XUR~}!O&v!Q![&v!c!}&v#R#S&v#T#U!%k#U#o&v~!%pVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a!&V#a#o&v~!&[VR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a!&q#a#o&v~!&vVR~}!O&v!Q![&v!c!}&v#R#S&v#T#m&v#m#n,r#n#o&v~!'bWR~}!O&v!Q![&v!c!}&v#R#S&v#T#U!'z#U#i&v#i#j!*W#j#o&v~!(PVR~}!O&v!Q![&v!c!}&v#R#S&v#T#V&v#V#W!(f#W#o&v~!(kVR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g!)Q#g#o&v~!)VVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d!)l#d#o&v~!)qVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#aBo#a#o&v~!*]VR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a!*r#a#o&v~!*wVR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#i!+^#i#o&v~!+cVR~}!O&v!Q![&v!c!}&v#R#S&v#T#]&v#]#^!+x#^#o&v~!+}VR~}!O&v!Q![&v!c!}&v#R#S&v#T#d&v#d#e!,d#e#o&v~!,iVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a!-O#a#o&v~!-TVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y!-j#Y#o&v~!-oTR~}!O!.O!Q![&v!c!}&v#R#S&v#T#o&v~!.TVR~}!O&v!Q![&v!c!}&v#R#S&v#T#j&v#j#k!.j#k#o&v~!.oUR~}!O&v!Q![&v!c!}&v#R#S&v#T#U!/R#U#o&v~!/WVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a!/m#a#o&v~!/rVR~}!O&v!Q![&v!c!}&v#R#S&v#T#i&v#i#j!0X#j#o&v~!0^VR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y!0s#Y#o&v~!0xTR~}!O!1X!Q![&v!c!}&v#R#S&v#T#o&v~!1^XR~}!O&v!Q![&v!c!}&v#R#S&v#T#V&v#V#W!1y#W#d&v#d#e!3h#e#o&v~!2OUR~}!O&v!Q![&v!c!}&v#R#S&v#T#U!2b#U#o&v~!2gVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a!2|#a#o&v~!3RVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a,r#a#o&v~!3mVR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g!4S#g#o&v~!4XVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d!4n#d#o&v~!4sVR~}!O&v!Q![&v!c!}&v#R#S&v#T#Z&v#Z#[!5Y#[#o&v~!5_VR~}!O&v!Q!R&v!R!S,r!S![&v!c!}&v#R#S&v#T#o&v~!5yVR~}!O&v!Q![&v!c!}&v#R#S&v#T#]&v#]#^!6`#^#o&v~!6eVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a*O#a#o&v~!7PVR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g!7f#g#o&v~!7kVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d!8Q#d#o&v~!8VVR~}!O&v!Q![&v!c!}&v#R#S&v#T#Z&v#Z#[!8l#[#o&v~!8qXR~}!O&v!Q![&v!c!}&v#R#S&v#T#b&v#b#c,r#c#j&v#j#k,r#k#o&v~!9cVR~}!O&v!Q![&v!c!}&v#R#S&v#T#i&v#i#j!9x#j#o&v~!9}VR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d!:d#d#o&v~!:iVR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#i!$h#i#o&v~!;TVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y!;j#Y#o&v~!;oVR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#i!<U#i#o&v~!<ZVR~}!O&v!Q![&v!c!}&v#R#S&v#T#i&v#i#j!<p#j#o&v~!<uVR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g!=[#g#o&v~!=aVR~}!O&v!Q![&v!c!}&v#R#S&v#T#b&v#b#c!=v#c#o&v~!={TR~}!O!>[!Q![&v!c!}&v#R#S&v#T#o&v~!>aVR~}!O&v!Q![&v!c!}&v#R#S&v#T#Y&v#Y#Z!>v#Z#o&v~!>{VR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g!?b#g#o&v~!?gVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d!?|#d#o&v~!@RVR~}!O&v!Q![&v!c!}&v#R#S&v#T#a&v#a#b,r#b#o&v~!@mXR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y!AY#Y#m&v#m#n!B`#n#o&v~!A_VR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#i!At#i#o&v~!AyVR~}!O&v!Q![&v!c!}&v#R#S&v#T#e&v#e#f,r#f#o&v~!BeVR~}!O&v!Q![&v!c!}&v#R#S&v#T#a&v#a#b!Bz#b#o&v~!CPVR~}!O&v!Q![&v!c!}&v#R#S&v#T#U&v#U#V!Cf#V#o&v~!CkVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d!DQ#d#o&v~!DVVR~}!O&v!Q![&v!c!}&v#R#S&v#T#`&v#`#a!Dl#a#o&v~!DqTR~}!O!EQ!Q![&v!c!}&v#R#S&v#T#o&v~!EVVR~}!O&v!Q![&v!c!}&v#R#S&v#T#a&v#a#b!El#b#o&v~!EqUR~}!O&v!Q![&v!c!}&v#R#S&v#T#U!'z#U#o&v~!F[WU~R~}!O&v!Q![&v!c!}&v#R#S&v#T#U!Ft#U#[&v#[#]!IQ#]#o&v~!FyVR~}!O&v!Q![&v!c!}&v#R#S&v#T#Z&v#Z#[!G`#[#o&v~!GeVR~}!O&v!Q![&v!c!}&v#R#S&v#T#U&v#U#V!Gz#V#o&v~!HPVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d!Hf#d#o&v~!HkVR~}!O&v!Q![&v!c!}&v#R#S&v#T#W&v#W#X!&q#X#o&v~!IVXR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y,r#Y#f&v#f#g!Ir#g#o&v~!IwVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d!J^#d#o&v~!JcVR~}!O&v!Q![&v!c!}&v#R#S&v#T#k&v#k#l,r#l#o&v~!J}VR~}!O&v!Q![&v!c!}&v#R#S&v#T#b&v#b#c!Kd#c#o&v~!KiVR~}!O&v!Q![&v!c!}&v#R#S&v#T#k&v#k#l!LO#l#o&v~!LTVR~}!O&v!Q![&v!c!}&v#R#S&v#T#]&v#]#^!Lj#^#o&v~!LoVR~}!O&v!Q![&v!c!}&v#R#S&v#T#b&v#b#c!MU#c#o&v~!MZVR~}!O&v!Q![&v!c!}&v#R#S&v#T#W&v#W#X!Mp#X#o&v~!MuTR~}!O!NU!Q![&v!c!}&v#R#S&v#T#o&v~!NZVR~}!O&v!Q![&v!c!}&v#R#S&v#T#d&v#d#e!Np#e#o&v~!NuVR~}!O&v!Q![&v!c!}&v#R#S&v#T#f&v#f#g# [#g#o&v~# aVR~}!O&v!Q![&v!c!}&v#R#S&v#T#c&v#c#d# v#d#o&v~# {VR~}!O&v!Q![&v!c!}&v#R#S&v#T#h&v#h#i#!b#i#o&v~#!gVR~}!O&v!Q![&v!c!}&v#R#S&v#T#X&v#X#Y#!|#Y#o&v~##RVR~}!O&v!Q![&v!c!}&v#R#S&v#T#V&v#V#WCZ#W#o&v",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  tokenPrec: 0
});

const CommonLisp = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
              Application: context => context.column(context.node.from) + context.unit
                // Application: delimitedIndent({ closing: ")", align: false })
            }),
            foldNodeProp.add({
                Application: foldInside
            }),
            styleTags({
                Keyword: tags.keyword,
                Identifier: tags.variableName,
                KeywordSymbol: tags.atom,
                Quoted: tags.literal,
                Boolean: tags.bool,
                String: tags.string,
                Number: tags.number,
                SpecialForm: tags.keyword,
                LineComment: tags.lineComment,
                "( )": tags.paren
            })
        ]
    }),
    languageData: {
        commentTokens: { line: ";" }
    }
});

const highlightStyle = HighlightStyle.define([
  {tag: tags.keyword, color: "#35c16d"},
  {tag: tags.comment, color: "#a54819"},
  {tag: tags.number, color: "#80caff"},
  {tag: tags.string, color: "#2494c9"},
  {tag: tags.atom, color: "#ffb01f"},
  {tag: tags.bool, color: "#ffb01f"},
  {tag: tags.literal, color: "#be68ff"},
])
function commonLisp() {
    return new LanguageSupport(CommonLisp);
}




window.initEditor = (el, config, keyMap, updateCb) => {
  let {
    showLineNumbers,
    vimMode,
    vimAltEsc,

  } = config;

  let km = [];
  if (keyMap && Object.keys(keyMap).length) {
    for (let [key, cb] of Object.entries(keyMap)) {
      km.push({
        key: key,
        run: cb
      });
    }
  }
  let keymaps = [
    ...defaultKeymap,
    ...km
    // ...closeBracketsKeymap,
    // ...historyKeymap,
    // ...commentKeymap,
    // ...completionKeymap,
    // ...lintKeymap,
    // ...searchKeymap,
    //...foldKeymap,
  ];

  let updateListenerExt = EditorView.updateListener.of((update) => {
    if (update.docChanged) {
      updateCb();
    }
  });
  
 
  let extensions = [
    commonLisp(),
    syntaxHighlighting(highlightStyle, {fallback: true}),
    highlightSpecialChars(),
    history(),
    drawSelection(),
    dropCursor(),
    EditorState.allowMultipleSelections.of(true),
    indentOnInput(),
    bracketMatching(),
    closeBrackets(),
    rectangularSelection(),
    // defaultHighlightStyle.fallback,
      // foldGutter(),
      // highlightActiveLine(),
      // highlightActiveLineGutter(),
      // highlightSelectionMatches(),
    updateListenerExt,
    keymap.of(keymaps),
    keymap.of([indentWithTab]),
  ];
  if (showLineNumbers) {
    extensions.push(lineNumbers());
  }
  if (vimMode) {
    extensions.push(vim());
  }

  let editor = new EditorView({
    state: EditorState.create({
      extensions: extensions
    }),
    parent: el
  });
  // use cm to access the old cm5 api
  if (vimMode && vimAltEsc && vimAltEsc.length) {
    Vim.map(vimAltEsc, '<Esc>', 'insert');
  }
  return editor;

}